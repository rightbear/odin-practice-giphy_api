{"version":3,"file":"main.js","mappings":"mBACA,IAAIA,EAAsB,CAAC,ECD3BA,EAAoBC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,G,MCAxB,IAAIC,EACAP,EAAoBC,EAAEO,gBAAeD,EAAYP,EAAoBC,EAAEQ,SAAW,IACtF,IAAIC,EAAWV,EAAoBC,EAAES,SACrC,IAAKH,GAAaG,IACbA,EAASC,eAAkE,WAAjDD,EAASC,cAAcC,QAAQC,gBAC5DN,EAAYG,EAASC,cAAcG,MAC/BP,GAAW,CACf,IAAIQ,EAAUL,EAASM,qBAAqB,UAC5C,GAAGD,EAAQE,OAEV,IADA,IAAIC,EAAIH,EAAQE,OAAS,EAClBC,GAAK,KAAOX,IAAc,aAAaY,KAAKZ,KAAaA,EAAYQ,EAAQG,KAAKJ,GAE3F,CAID,IAAKP,EAAW,MAAM,IAAIa,MAAM,yDAChCb,EAAYA,EAAUc,QAAQ,SAAU,IAAIA,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KAC1GrB,EAAoBsB,EAAIf,C,6ECdlBgB,EAAMb,SAASc,cAAc,OAC7BC,EAAQf,SAASc,cAAc,SAC/BE,EAAYhB,SAASc,cAAc,cACnCG,EAASjB,SAASc,cAAc,WAChCI,EAAQ,mCASdF,EAAUG,iBAAiB,SAAS,WAElC,GAAoB,KAAhBJ,EAAMK,MACRC,MACE,gEAEG,CACL,MAAMC,EAAeP,EAAMK,MACrBG,EAAe,IAAIC,gBACzBD,EAAaE,OAAO,UAAW,GAAGP,KAClCK,EAAaE,OAAO,IAAK,GAAGH,KAE5BI,MAAM,2CAA2CH,IAAgB,CAC/DI,KAAM,SAELC,MAAK,SAAUC,GAEd,IAAKA,EAASC,GAEZ,MAAM,IAAIpB,MAAM,uBAAuBmB,EAASE,UAElD,OAAOF,EAASG,MAClB,IACCJ,MAAK,SAAUC,GAIe,IAAzBA,EAASI,KAAK1B,QAChBM,EAAIT,IAAM,EACV8B,YAAW,KACTb,MACE,qEAED,OAIHR,EAAIT,IAAMyB,EAASI,KAAKE,OAAOC,SAASC,IACxCH,YAAW,KACTb,MAAM,4CACL,KAEP,IACCiB,OAAOC,IAEN1B,EAAIT,IAAM,EACVoC,QAAQC,IAAIF,GACZL,YAAW,KACTb,MACE,sEAED,OAET,CACF,IAGAJ,EAAOE,iBAAiB,SAAS,WAC/BO,MAAM,mDAAmDR,WAAgB,CACvES,KAAM,SAELC,MAAK,SAAUC,GACd,OAAOA,EAASG,MAClB,IACCJ,MAAK,SAAUC,GACdhB,EAAIT,IAAMyB,EAASI,KAAKE,OAAOC,SAASC,IACxCH,YAAW,KACTb,MAAM,yDACL,IACL,IACCiB,OAAOC,IACNC,QAAQC,IAAIF,KAElB,G","sources":["webpack://odin-practice-giphy-api/webpack/bootstrap","webpack://odin-practice-giphy-api/webpack/runtime/global","webpack://odin-practice-giphy-api/webpack/runtime/publicPath","webpack://odin-practice-giphy-api/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import \"./styles.css\";\nimport noGIF from \"./images/No-GIF.jpg\";\nimport connectError from \"./images/Connect-Error.jpg\";\n\nconst img = document.querySelector(\"img\");\nconst input = document.querySelector(\"input\");\nconst searchBtn = document.querySelector(\"#searchBtn\");\nconst catBtn = document.querySelector(\"#catBtn\");\nconst myKey = \"QpLVtnUCvKkMTkPJVPxYtd8RvZ0XXgmR\";\n\nconst catEmoji = \"\\u{1F431}\";\nconst wrySmileEmoji = \"\\u{1F605}\";\nconst confuseEmoji = \"\\u{1F914}\";\nconst goodSmileEmoji = \"\\u{1F604}\";\nconst pensiveEmoji = \"\\u{1F614}\";\n\n// Show the requested GIF with input keywords\nsearchBtn.addEventListener(\"click\", function showNewGIF() {\n  // Check whether the input keyword exists when searching\n  if (input.value === \"\") {\n    alert(\n      `It seems that you don't type anything when searching. ${wrySmileEmoji}`,\n    );\n  } else {\n    const inputKeyword = input.value;\n    const searchParams = new URLSearchParams();\n    searchParams.append(\"api_key\", `${myKey}`);\n    searchParams.append(\"s\", `${inputKeyword}`);\n\n    fetch(`https://api.giphy.com/v1/gifs/translate?${searchParams}`, {\n      mode: \"cors\",\n    })\n      .then(function (response) {\n        // Check whether the connection to the GIF website is successful\n        if (!response.ok) {\n          // response.ok is true when status code is 200~299\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(function (response) {\n        // Check whether there is corresponding GIF to the input keyword.\n        // If the keyword has no corresponding GIF, the website still returns status code 200\n        // But the length of data array in response json file will be 0, we can show some result based on it\n        if (response.data.length === 0) {\n          img.src = noGIF;\n          setTimeout(() => {\n            alert(\n              `No result for the input keyword. Maybe change a new keyword? ${confuseEmoji}`,\n            );\n          }, 1000);\n        }\n        // If the keyword has corresponding GIFs, show the returned result.\n        else {\n          img.src = response.data.images.original.url;\n          setTimeout(() => {\n            alert(`Here is the GIF you want. Enjoy it! ${goodSmileEmoji}`);\n          }, 2000);\n        }\n      })\n      .catch((error) => {\n        // If there is some error thrown out when requesting the GIF, show the error message\n        img.src = connectError;\n        console.log(error);\n        setTimeout(() => {\n          alert(\n            `Oops! There is some trouble here. Please try to search later. ${pensiveEmoji}`,\n          );\n        }, 1000);\n      });\n  }\n});\n\n// Show the requested GIF about cats\ncatBtn.addEventListener(\"click\", function showCatGIF() {\n  fetch(`https://api.giphy.com/v1/gifs/translate?api_key=${myKey}&s=cats`, {\n    mode: \"cors\",\n  })\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (response) {\n      img.src = response.data.images.original.url;\n      setTimeout(() => {\n        alert(`You successfully summon some cute little things! ${catEmoji}`);\n      }, 2000);\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n});\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","img","querySelector","input","searchBtn","catBtn","myKey","addEventListener","value","alert","inputKeyword","searchParams","URLSearchParams","append","fetch","mode","then","response","ok","status","json","data","setTimeout","images","original","url","catch","error","console","log"],"sourceRoot":""}